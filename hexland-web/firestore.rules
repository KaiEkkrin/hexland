rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(adventureId) {
      return get(/databases/$(database)/documents/adventures/$(adventureId)).data.owner == request.auth.uid;
    }

    function isPlayer(adventureId) {
      let player = get(/databases/$(database)/documents/adventures/$(adventureId)/players/$(request.auth.uid));
      return player.data.playerId == request.auth.uid && player.data.id == adventureId && player.data.get('allowed', true) != false;
    }

    function isPlayerOrOwner(adventureId) {
      return isPlayer(adventureId) || isOwner(adventureId);
    }

    match /adventures/{adventureId} {
      allow read: if request.auth != null; // must be able to read adventures to join them
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.owner == request.auth.uid;
    }

    match /adventures/{adventureId}/invites/{id} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isOwner(adventureId);
    }

    match /adventures/{adventureId}/maps/{id} {
      allow read: if request.auth != null && isPlayerOrOwner(adventureId);
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid &&
        isOwner(adventureId);
      allow update, delete: if request.auth != null && resource.data.owner == request.auth.uid;
    }

    match /adventures/{adventureId}/maps/{id}/changes/{changeId} {
      allow create: if request.auth != null &&
        request.resource.data.user == request.auth.uid && isPlayerOrOwner(adventureId);
      allow read: if request.auth != null && isPlayerOrOwner(adventureId);
      allow update, delete: if request.auth != null && isOwner(adventureId);
    }

    // This lets us query for all adventures shared with us
    // It looks like we can't check for uid matching request.auth.uid here
    match /{document=**}/players/{uid} {
      allow read: if request.auth != null;
    }

    match /adventures/{adventureId}/players/{uid} {
      // Yes, only owners can create (their own) player record!  Joining player records are created by the
      // `joinAdventure` function through the Admin API, not by the player directly.
      allow create: if request.auth != null && request.auth.uid == uid && request.resource.data.playerId == uid && isOwner(adventureId);

      // Players can update their records, but not to change the allowed flag
      allow update: if request.auth != null && request.resource.data.playerId == uid && (
        (request.auth.uid == uid && request.resource.data.get('allowed', true) == resource.data.get('allowed', true)) ||
        isOwner(adventureId)
      );

      // Players and owners can delete (leave adventure; delete adventure) -- but only un-blocked
      // players can leave (otherwise a blocked player could simply re-join)
      allow delete: if request.auth != null && (
        (request.auth.uid == uid && resource.data.get('allowed', true) != false) ||
        isOwner(adventureId)
      );
    }

    // Profiles can be read and written only by a user with the id matching the document
    match /profiles/{id} {
      allow read, write: if request.auth != null && request.auth.uid == id;
    }

    // No writing anything else! :P
    match /{document=**} {
      allow read, write: if false;
    }   
  }
}