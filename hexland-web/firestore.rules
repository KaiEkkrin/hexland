rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(adventureId) {
      return get(/databases/$(database)/documents/adventures/$(adventureId)).data.owner == request.auth.uid;
    }

    function isPlayer(adventureId) {
      return exists(/databases/$(database)/documents/adventures/$(adventureId)/players/$(request.auth.uid)) ||
        isOwner(adventureId);
    }

    match /adventures/{adventureId} {
      allow read: if request.auth != null && isPlayer(adventureId);
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.owner == request.auth.uid;
    }

    match /adventures/{adventureId}/maps/{id} {
      allow read: if request.auth != null && isPlayer(adventureId);
      allow write: if request.auth != null && isOwner(adventureId);
    }

    match /adventures/{adventureId}/maps/{id}/changes/{changeId} {
      allow create: if request.auth != null &&
        request.resource.data.user == request.auth.uid && isPlayer(adventureId);
      allow read: if request.auth != null && isPlayer(adventureId);
      allow update, delete: if request.auth != null && isOwner(adventureId);
    }

    match /adventures/{adventureId}/players/{uid} {
      allow read, write: if request.auth != null && (
        request.auth.uid == uid || isOwner(adventureId)
      ); // TODO also require invite for someone to create one of these
    }

    // Profiles can be read and written only by a user with the id matching the document
    match /profiles/{id} {
      allow read, write: if request.auth != null && request.auth.uid == id;
    }

    // No writing anything else! :P
    match /{document=**} {
      allow read, write: if false;
    }   
  }
}